on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: true
        description: "Version to release"

name: Release

jobs:
  release_workflow:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Step 1 - Checkout repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
          token: ${{ secrets.PUSH_TO_PROTECTED_BRANCH }}

      - name: Step 2 - Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Step 3 - Configure Git user
        run: |
          git config --global user.name "release plugin"
          git config --global user.email "release-plugin@users.noreply.github.com"

      - name: Step 4 - Make Release
        run: |
          : # create release branch
          git checkout -b $RELEASE_BRANCH
          
          mvn versions:use-releases
          
          git commit -m "Prepare release ${{ github.event.inputs.version }}"
          
          git tag -a $TAG
          
          : # merge to master all changes till release  
          git checkout master
          git merge $RELEASE_BRANCH
          
          : # merge to develop
          git checkout develop
          git merge $RELEASE_BRANCH
          
          : # create new snapshot version
          mvn versions:use-next-releases
          git commit -m "Prepare release ${{ github.event.inputs.version }}"
          
          mvn clean deploy -ntp --settings scripts/settings.xml gpg:sign -Prelease -DskipTests -U
          
          mvn versions:use-next-releases

          : # create release branch on tagged commit
          git checkout -b $RELEASE_BRANCH `git describe --tag --abbrev=0`
          
          
          
          : # push everything     
          git push --atomic origin $RELEASE_BRANCH master develop --follow-tags # all or nothing
          
          : # deploy to sonatype
          mvn release:perform -DlocalCheckout=true --settings scripts/settings.xml

        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.PUSH_TO_PROTECTED_BRANCH }}
          RELEASE_BRANCH: release-${{ github.event.inputs.version }}
          TAG: v${{ github.event.inputs.version }}

      - name: Step 5 - Create release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="$(git describe --abbrev=0)"
          echo $TAG
          gh release create "$TAG" --repo="$GITHUB_REPOSITORY" --title="${GITHUB_REPOSITORY#*/} ${TAG#v}" --generate-notes
